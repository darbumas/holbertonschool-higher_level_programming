=====================================
Doctest for module 7-base_geometry.py
=====================================

Import Module
=============
::
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()

Testcases for positive integer and float
---------------------------------------
::
    >>> bg.integer_validator("rand_num", 23)
    >>> bg.integer_validator("float", 0.002)
    Traceback (most recent call last):
    TypeError: float must be an integer

Testcases for zero, negative integer and float
---------------------------------------
::
    >>> bg.integer_validator("zero", 0)
    Traceback (most recent call last):
    ValueError: zero must be greater than 0
    >>> bg.integer_validator("rand_neg_num", -23)
    Traceback (most recent call last):
    ValueError: rand_neg_num must be greater than 0
    >>> bg.integer_validator("float_neg", -0.002)
    Traceback (most recent call last):
    TypeError: float_neg must be an integer

Testcases for strings and dictionaries
--------------------------------------
::
    >>> bg.integer_validator("string", "string")
    Traceback (most recent call last):
    TypeError: string must be an integer
    >>> bg.integer_validator("dict", {'1: dict', '2: sauce'})
    Traceback (most recent call last):
    TypeError: dict must be an integer

Testacse trying to use the public instance method ``area()``
------------------------------------------------------------
::
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Testcase for passing empty parameters
_____________________________________
::
    >>> bg.integer_validator(23)
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

Testcase for an empty string
----------------------------
    >>> bg.integer_validator("", 23)
