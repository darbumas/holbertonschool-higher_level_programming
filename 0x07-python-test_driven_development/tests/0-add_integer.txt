=====================================
Unit test for module 0-add_integer.py
=====================================

This module defines a simple function ``add_integer()`` with a parameter of two arguments, and
returns the sum of said arguments. Prototype => ``def add_integer(a, b=98):``
Both arguments (a and b) must be integers or floats (the floats must be casted to ints).
Argument b is given a default value of 98. The return value must be an integer.

Import module
=============
::
    >>> add_integer = __import__('0-add_integer').add_integer

Returns the correct answer if inputs abide the rules.
-----------------------------------------------------
::
    >>> add_integer(2, 3)
    5
    >>> add_integer(2, -3)
    -1
    >>> add_integer(2)
    100
    >>> add_integer(2.505, 3)
    5

Returns an error if inputs violate the rules.
---------------------------------------------
::
    If strings are passed as arguments
    >>> add_integer("I'm a string")
    Traceback (most recent call last):
    TypeError: a must be an integer
    >>> add_integer(2, "I'm a string")
    Traceback (most recent call last):
    TypeError: b must be an integer

    If lists are passed as arguments
    >>> add_integer([1, 2, 3], [6, 5, 4])
    Traceback (most recent call last):
    TypeError: a must be an integer
    >>> add_integer(2, [3, 4, 5])
    Traceback (most recent call last):
    TypeError: b must be an integer

    If boolean is passed as arguments
    >>> add_integer(True, 2)
    Traceback (most recent call last):
    TypeError: a must be an integer
    >>> add_integer(2, False)
    Traceback (most recent call last):
    TypeError: b must be an integer

    If missing at least one argument (empty)
    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

    If trying to convert float NaN to integer
    >>> add_integer(float('nan'), 2.2)
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    Float Overflow
    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
